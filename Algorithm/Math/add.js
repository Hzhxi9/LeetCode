/**
 *  题目描述
 *  写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。
 *
 *  url JS &、|、^和~（逻辑位运算符）
 *  http://c.biancheng.net/view/5469.html
 *
 *  左移 >> 1 乘*2
 *  右移
 *
 *  思路分析
 *    将加法拆机成三步
 *    1. 不进位相加
 *    2. 计算进位
 *    3. 进位与不进位结果进行相加
 *    4. 重复这三步，直到进位值为0
 *
 *  示例
 *    十进制 5 + 17
 *    1. 不进位相加 12
 *    2. 计算进位 5 + 7 产生进位 10
 *    3. 进位与不进位结果相加为 12 + 10 = 22
 *
 *    二进制实现十进制
 *    1. 5 二进制为 101, 17 的二进制为10001
 *    2. 不进位相加, 101 + 10001 = 10100
 *    3. 计算进位 10
 *    4. 进位与不进位结果进行相加 10100 + 10 = 10110 转换成十进制为22
 *
 *    使用位运算来计算二进制
 *    1. 二进制异或操作和不进位相加得到的结果相同或 1^1=0 0^1=1 0^0=0
 *    2. 二进制与操作后左移和进位结果相同 1&1=1 1&0=0 0&0=0
 *
 *
 *    异或运算符^, 二进制加法，不考虑进位
 *
 */

/**
 * 递归实现
 * @param {number} num1
 * @param {number} num2
 * @return {number}
 */
const add = function (num1, num2) {
  if (num2 === 0) return num1;
  /**
   *  num1 ^ num2 直接相加，不考虑进位，即二进制异或操作
   *  (num1 & num2) << 1 进位，即二进制与，再左移
   *
   *
   *  示例: 5 + 7 = 12
   *  5 二进制 101, 7 二进制 111
   *  101 ^ 111 = 010 相加各位的值，不考虑进位
   *  (101 & 111) << 1 = 1010
   *  重复上述两步，各位相加 010 ^ 1010 = 1000 进位值 (010 & 1010) << 1 = 100
   *  进位值为0时， 1000 ^ 100 = 1100 跳出循环
   */
  return add(num1 ^ num2, (num1 & num2) << 1);
};

/**
 * 非递归实现
 * @param {number} num1
 * @param {number} num2
 * @return {number}
 */
const add = function (num1, num2) {
  /**进位值为0时,跳出循环 */
  while (num2 !== 0) {
    /**直接相加，不考虑进位，即二进制异或操作 */
    const excl = num1 ^ num2;
    /**进位，即二进制与，再左移 */
    const carry = (num1 & num2) << 1;
    num1 = excl;
    num2 = carry;
  }
  return num1;
};

/**Debug */
console.log(add(5, 7));
